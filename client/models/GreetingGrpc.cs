// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: greeting.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Greet {
  public static partial class GreetingService
  {
    static readonly string __ServiceName = "greet.GreetingService";

    static readonly grpc::Marshaller<global::Greet.GreetingRequest> __Marshaller_greet_GreetingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetingResponse> __Marshaller_greet_GreetingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetManyRequest> __Marshaller_greet_GreetManyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetManyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetManyResponse> __Marshaller_greet_GreetManyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetManyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.LongGreetRequest> __Marshaller_greet_LongGreetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.LongGreetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.LongGreetResponse> __Marshaller_greet_LongGreetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.LongGreetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetEveryOneRequest> __Marshaller_greet_GreetEveryOneRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetEveryOneRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetEveryOneResponse> __Marshaller_greet_GreetEveryOneResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetEveryOneResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetDeadlineRequest> __Marshaller_greet_GreetDeadlineRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetDeadlineRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetDeadlineResponse> __Marshaller_greet_GreetDeadlineResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetDeadlineResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Greet.GreetingRequest, global::Greet.GreetingResponse> __Method_Greet = new grpc::Method<global::Greet.GreetingRequest, global::Greet.GreetingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Greet",
        __Marshaller_greet_GreetingRequest,
        __Marshaller_greet_GreetingResponse);

    static readonly grpc::Method<global::Greet.GreetManyRequest, global::Greet.GreetManyResponse> __Method_GreetMany = new grpc::Method<global::Greet.GreetManyRequest, global::Greet.GreetManyResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GreetMany",
        __Marshaller_greet_GreetManyRequest,
        __Marshaller_greet_GreetManyResponse);

    static readonly grpc::Method<global::Greet.LongGreetRequest, global::Greet.LongGreetResponse> __Method_LongGreet = new grpc::Method<global::Greet.LongGreetRequest, global::Greet.LongGreetResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "LongGreet",
        __Marshaller_greet_LongGreetRequest,
        __Marshaller_greet_LongGreetResponse);

    static readonly grpc::Method<global::Greet.GreetEveryOneRequest, global::Greet.GreetEveryOneResponse> __Method_GreetEveryOne = new grpc::Method<global::Greet.GreetEveryOneRequest, global::Greet.GreetEveryOneResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GreetEveryOne",
        __Marshaller_greet_GreetEveryOneRequest,
        __Marshaller_greet_GreetEveryOneResponse);

    static readonly grpc::Method<global::Greet.GreetDeadlineRequest, global::Greet.GreetDeadlineResponse> __Method_GreetWithDeadline = new grpc::Method<global::Greet.GreetDeadlineRequest, global::Greet.GreetDeadlineResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GreetWithDeadline",
        __Marshaller_greet_GreetDeadlineRequest,
        __Marshaller_greet_GreetDeadlineResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Greet.GreetingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GreetingService</summary>
    [grpc::BindServiceMethod(typeof(GreetingService), "BindService")]
    public abstract partial class GreetingServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Greet.GreetingResponse> Greet(global::Greet.GreetingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GreetMany(global::Greet.GreetManyRequest request, grpc::IServerStreamWriter<global::Greet.GreetManyResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greet.LongGreetResponse> LongGreet(grpc::IAsyncStreamReader<global::Greet.LongGreetRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GreetEveryOne(grpc::IAsyncStreamReader<global::Greet.GreetEveryOneRequest> requestStream, grpc::IServerStreamWriter<global::Greet.GreetEveryOneResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greet.GreetDeadlineResponse> GreetWithDeadline(global::Greet.GreetDeadlineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GreetingService</summary>
    public partial class GreetingServiceClient : grpc::ClientBase<GreetingServiceClient>
    {
      /// <summary>Creates a new client for GreetingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GreetingServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GreetingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GreetingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GreetingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GreetingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Greet.GreetingResponse Greet(global::Greet.GreetingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Greet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greet.GreetingResponse Greet(global::Greet.GreetingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Greet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Greet.GreetingResponse> GreetAsync(global::Greet.GreetingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GreetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Greet.GreetingResponse> GreetAsync(global::Greet.GreetingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Greet, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Greet.GreetManyResponse> GreetMany(global::Greet.GreetManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GreetMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Greet.GreetManyResponse> GreetMany(global::Greet.GreetManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GreetMany, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Greet.LongGreetRequest, global::Greet.LongGreetResponse> LongGreet(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LongGreet(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Greet.LongGreetRequest, global::Greet.LongGreetResponse> LongGreet(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_LongGreet, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Greet.GreetEveryOneRequest, global::Greet.GreetEveryOneResponse> GreetEveryOne(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GreetEveryOne(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Greet.GreetEveryOneRequest, global::Greet.GreetEveryOneResponse> GreetEveryOne(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GreetEveryOne, null, options);
      }
      public virtual global::Greet.GreetDeadlineResponse GreetWithDeadline(global::Greet.GreetDeadlineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GreetWithDeadline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greet.GreetDeadlineResponse GreetWithDeadline(global::Greet.GreetDeadlineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GreetWithDeadline, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Greet.GreetDeadlineResponse> GreetWithDeadlineAsync(global::Greet.GreetDeadlineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GreetWithDeadlineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Greet.GreetDeadlineResponse> GreetWithDeadlineAsync(global::Greet.GreetDeadlineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GreetWithDeadline, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GreetingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GreetingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GreetingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Greet, serviceImpl.Greet)
          .AddMethod(__Method_GreetMany, serviceImpl.GreetMany)
          .AddMethod(__Method_LongGreet, serviceImpl.LongGreet)
          .AddMethod(__Method_GreetEveryOne, serviceImpl.GreetEveryOne)
          .AddMethod(__Method_GreetWithDeadline, serviceImpl.GreetWithDeadline).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GreetingServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Greet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Greet.GreetingRequest, global::Greet.GreetingResponse>(serviceImpl.Greet));
      serviceBinder.AddMethod(__Method_GreetMany, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Greet.GreetManyRequest, global::Greet.GreetManyResponse>(serviceImpl.GreetMany));
      serviceBinder.AddMethod(__Method_LongGreet, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Greet.LongGreetRequest, global::Greet.LongGreetResponse>(serviceImpl.LongGreet));
      serviceBinder.AddMethod(__Method_GreetEveryOne, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Greet.GreetEveryOneRequest, global::Greet.GreetEveryOneResponse>(serviceImpl.GreetEveryOne));
      serviceBinder.AddMethod(__Method_GreetWithDeadline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Greet.GreetDeadlineRequest, global::Greet.GreetDeadlineResponse>(serviceImpl.GreetWithDeadline));
    }

  }
}
#endregion
